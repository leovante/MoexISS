version: '3.5'
services:

  postgres1:
    image: postgres
    container_name: postgres_moex2
    #    extra_hosts:
    #      - "host.docker.internal:host-gateway"
    restart: always
    environment:
      PGUSER: postgres
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pg_moex2:/var/lib/postgresql/data
    ports:
      - '5440:5432'
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  moex2:
    image: leovante/moex2:latest
    container_name: moex2
    depends_on:
      postgres1:
        condition: service_healthy
    #    build:
    #      context: ./
    #      dockerfile: ./dockerfile
    #      args:
    #        JAR_FILE: target/moex2-1.0-SNAPSHOT.jar
    environment:
      APP_PORT: 8080
      DB_HOST: postgres1
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      JVM_OPTS: >
        -XX:+CrashOnOutOfMemoryError
    restart: always
    ports:
      - '24300:8080'
    networks:
      - my_network
    command: [ "java","-jar","-Dliquibase.hub.mode=off","/usr/local/service/moex2-1.0-SNAPSHOT.jar" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://moex2:8080/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 500M

  redis:
    image: redis
    restart: always
    volumes:
      - redis:/data
    networks:
      - my_network
    ports:
      - '6379:6379'

  superset2:
    container_name: superset2
    build:
      context: .
      dockerfile: ./dockerfile_superset2/Dockerfile
    restart: always
    environment:
      MAPBOX_API_KEY: ${MAPBOX_API_KEY}
      SUPERSET_HOME: /etc/superset
      SUPERSET_CONFIG_PATH: /etc/superset/superset_config.py
    volumes:
      - ${WD}/superset2/superset_config.py:/etc/superset/superset_config.py
      - ${WD}/superset2/superset.db:/var/lib/superset/superset.db
    networks:
      - my_network
    ports:
      - '8089:8088'
    depends_on:
      - redis

  postgres_secmaster:
    build:
      context: .
      dockerfile: ./dockerfile_postgres_secmaster/Dockerfile
    restart: always
    container_name: postgres_secmaster
    networks:
      - my_network
    ports:
      - '5432:5432'
    environment:
      PGUSER: postgres
      POSTGRES_USER: postgres
      SHARED_PASSWORD: password
      POSTGRES_PASSWORD: posgres349
      POSTGRES_DB: securities_master
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_airflow:
    image: postgres
    container_name: postgres_airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    networks:
      - my_network
    ports:
      - '5444:5432'
    volumes:
      - pg_data_airflow:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow:
    image: airflow
    container_name: airflow
    build:
      context: .
      dockerfile: ./dockerfile_airflow/Dockerfile
      args:
        AIRFLOW_DEPS: gcp_api,s3
        PYTHON_DEPS: MarkupSafe==2.0.1 WTForms==2.3.3 SQLAlchemy==1.3.23 Flask-SQLAlchemy==2.4.4
    restart: always
    depends_on:
      - postgres_airflow
    networks:
      - my_network
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
    volumes:
      - ${WD}/airflow/dags/:/usr/local/airflow/dags
      - ${WD}/q_pack/:/usr/local/airflow/dags/q_pack
    ports:
      - '8080:8080'
    command: webserver
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 1024M

volumes:
  pg_moex2:
    external: false
    name: pg_moex2
  pg_data:
    external: false
    name: pg_data
  pg_data_airflow:
    external: false
    name: pg_data_airflow
  redis:
    external: false
    name: redis

networks:
  my_network:
